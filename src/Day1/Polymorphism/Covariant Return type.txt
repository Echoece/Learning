The covariant return type specifies that the return type may vary in the same direction as the subclass. since Java5, it is
possible to override method by changing the return type if subclass overrides any method whose return type is Non-Primitive
but it changes its return type to subclass type. Let's take a simple example:


# Advantages of Covariant Return Type:
-> Covariant return type assists to stay away from the confusing type casts in the class hierarchy and makes the code more usable, readable, and maintainable.
-> In the method overriding, the covariant return type provides the liberty to have more to the point return types.
-> Covariant return type helps in preventing the run-time ClassCastExceptions on returns.


# How is Covariant return types implemented?
Java doesn't allow the return type-based overloading, but JVM always allows return type-based overloading. JVM uses the
full signature of a method for lookup/resolution. Full signature means it includes return type in addition to argument
types. i.e., a class can have two or more methods differing only by return type. javac uses this fact to implement covariant return types.


Example: if a program has class A as parent class, class B extending A and class C extending B. All class has their own implementation of a method
named test() which returns this (as in the object / instance reference). Now if we dont use covariant, every version of test() will return type of A.
To understand which version we are returning we have to typecast it to for example B or C. This is bad practice and not very readable for long chains.
Here covariant helps out, we can simple make the return type in class B as B and in class C as C. This will be more readable.




