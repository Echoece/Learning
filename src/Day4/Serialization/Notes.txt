# Serialization:
Serialization in Java is a mechanism of writing the state of an object into a byte-stream. It is mainly used in Hibernate, RMI, JPA, EJB and JMS technologies

# Deserialization:
The reverse operation of serialization is called deserialization where byte-stream is converted into an object.

-> We must have to implement the Serializable interface for serializing the object. Otherwise will be RuntimeException saying
   "NotSerializableException".
-> The serialization and deserialization process is platform-independent, it means you can serialize an object on one platform and
   deserialize it on a different platform.
-> We can add any no. Of objects to the file and we can read all those objects from the file. But the order we write objects in,
   the same order only the objects will come back. That is order is important.

//----------------------------------------------------------------------

# java.io.Serializable interface:
Serializable is a marker interface (has no data member and method). It is used to "mark" Java classes so that the objects of these
classes may get a certain capability. The Cloneable and Remote are also marker interfaces.
The String class and all the wrapper classes implement the java.io.Serializable interface by default.

# Externalizable Interface:
Externalization serves the purpose of custom Serialization, where we can decide what to store in stream. Externalizable interface
present in java.io, is used for Externalization which extends Serializable interface.

It consist of two methods which we have to override to write/read object into/from stream :

    public void writeExternal(ObjectOutput out) throws IOException:
        This method will be executed automatically by jvm at the time of serialization. It is a callback method. Hence at the time of
        serialization if we want to perform any extra work we have to define that in this method only. (prepare encrypted password and
        write encrypted password separate to the file )

    public void readExternal(ObjectInput in) throws IOException:
        This method will be executed automatically by JVM at the time of Deserialization. Hence at the time of Deserialization if we want to perform any
        extra activity we have to define that in this method only.(read encrypted password , perform decryption and assign decrypted password to the
        current object password variable )

//----------------------------------------------------------------------

# Transient:
transient is the modifier applicable only for variables. While performing serialization if we don't want to save the value of a particular
variable to meet security constant such type of variable, then we should declare that variable with "transient" keyword. At the time of serialization
JVM ignores the original value of transient variable and save default value to the file.

In short, transient keywords means a variable wont be serialized.

Transient has no effect on static or final variables,
static variable: If there is any static data member in a class, it will not be serialized because static is the part of class not object itself.
final variable: final variables will be participated into serialization directly by their values.

Example Table:

    declaration                             output
int i=10;
int j=20;                           10................20

transient int i=10;
int j=20;                           0................20

transient int i=10;
transient static int j=20;          0................20

transient final int i=10;
transient int j=20;                 10................0

transient final int i=10;
transient static int j=20;          10................20

//----------------------------------------------------------------------

# SerialVersionUID
It is recommended to explicitly declare the serialVersionUID field in the class and have it private also

-> The serialization process at runtime associates an id with each Serializable class which is known as SerialVersionUID.
-> The sender and receiver must be the same.To verify it, SerialVersionUID is used. The sender and receiver must have the same SerialVersionUID,
   otherwise, InvalidClassException will be thrown when you deserialize the object
-> It must be of the long type with static and final.

//----------------------------------------------------------------------
