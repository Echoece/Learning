# Functional programming:
It is a declarative style of programming rather than imperative. The basic objective of this style of programming is to make
code more concise, less complex, more predictable, and easier to test compared to the legacy style of coding. Functional
programming deals with certain key concepts such as pure function, immutable state, assignment-less programming etc.

//----------------------------------------------------------------------

Predicate:
interface Predicate<T> Represents a predicate (boolean-valued function) of one argument. This is a functional interface whose functional method is test(Object).
This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.

Methods:
1. Predicate<T> and(Predicate<? super T> other)      : Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another.
2. static <T> Predicate<T> isEqual(Object targetRef) : Returns a predicate that tests if two arguments are equal according to Objects.equals(Object, Object).
3. Predicate<T>	negate()                             : Returns a predicate that represents the logical negation of this predicate.
4. Predicate<T>	or(Predicate<? super T> other)       : Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another.
5. boolean	test(T t)                                : Evaluates this predicate on the given argument. Basically runs the predicate,
                                                       similar to apply() for Function interface

//----------------------------------------------------------------------

Function:

Interface Function<T, R> represents a function that takes one argument T type and produces a result of R type.

Methods:
    1. R apply(T t): Applies this function to the given argument.

    2. <V> Function<T,V> andThen(Function<? super R,? extends V> after) : Returns a composed function of T argument and V return type that first
                                                                          applies this function to its input, and then applies the after function to the result.

    3. <V> Function<V,R> compose(Function<? super V,? extends T> before): Returns a composed function of V return typethat first applies the before function to its input,
                                                                          and then applies this function to the result.

R = return type, T = argument, V = type of input to the before/after function
in other words: x.andThen(y) is the same as y.compose(x).

//----------------------------------------------------------------------

BiFunction:
-> Same as function, but it takes two arguments.
-> Interface BiFunction<T,U,R> Represents a function that accepts two arguments(T and U) and produces a result (R).
-> It only has apply and andThen method. Doesnt have compose method like Function.

//----------------------------------------------------------------------
