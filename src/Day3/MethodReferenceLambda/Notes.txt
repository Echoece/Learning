# Method Reference:
Java provides a new feature called method reference in Java 8. Method reference is used to refer method of functional
interface. It is compact and easy form of lambda expression. Each time when you are using lambda expression to just
referring a method, you can replace your lambda expression with method reference.

There are following types of method references in java:
            -> Reference to a static method.
            -> Reference to an instance method.
            -> Reference to a constructor.


# Lambda:
Lambda expression provides implementation of functional interface. An interface which has only one abstract method is
called functional interface. Java provides an annotation @FunctionalInterface, which is used to declare an interface as functional interface.
It provides a clear and concise way to represent one method interface using an expression. It is very useful in collection library. It
helps to iterate, filter and extract data from collection.
Lambda can be used on Comparator, Thread, ForEach loop, Filter in stream, Event listener

    -> The body of a lambda expression can contain zero, one or more statements.
    -> When there is a single statement curly brackets are not mandatory and the return type of the anonymous function is the same as that of the body expression.
       When there are more than one statements, then these must be enclosed in curly brackets (a code block) and the return type of the anonymous
    -> function is the same as the type of the value returned within the code block, or void if nothing is returned.
